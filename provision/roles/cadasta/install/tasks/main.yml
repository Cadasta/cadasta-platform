- name: Clone cadasta-platform repository
  become: yes
  become_user: "{{ app_user }}"
  git: repo=https://github.com/Cadasta/cadasta-platform
       dest="{{ application_path }}"
       force=yes
       version="{{ deploy_version }}"

- name: Set up environment variables
  become: yes
  become_user: root
  register: env_vars
  blockinfile:
    dest: /etc/environment
    state: present
    insertafter: EOF
    marker: "ANSIBLE_{mark}=dummy"
    block: |
      DB_HOST="{{ db_host }}"
      API_HOST="{{ api_url }}"
      DOMAIN="{{ main_url }}"
      SECRET_KEY="{{ secret_key }}"
      EMAIL_HOST_USER="{{ email_host_user }}"
      EMAIL_HOST_PASSWORD="{{ email_host_password }}"
      S3_BUCKET="{{ s3_bucket }}"
      S3_ACCESS_KEY="{{ s3_access_key }}"
      S3_SECRET_KEY="{{ s3_secret_key }}"
      DJANGO_SETTINGS_MODULE="{{ django_settings }}"
      MEMCACHED_HOST="{{ memcached_host }}"
      ES_HOST="{{ es_host }}"
      OPBEAT_ORGID="{{ opbeat_orgID }}"
      OPBEAT_APPID="{{ opbeat_appID }}"
      OPBEAT_TOKEN="{{ opbeat_token }}"
      SLACK_HOOK="{{ slack_hook }}"

- name: Enable environment variables for SSH
  become: yes
  become_user: root
  register: ssh_env
  blockinfile:
    dest: /etc/sudoers
    state: present
    insertafter: 'Defaults\s+secure_path'
    block: |
      Defaults	env_keep += DB_HOST
      Defaults	env_keep += API_HOST
      Defaults	env_keep += DOMAIN
      Defaults	env_keep += SECRET_KEY
      Defaults	env_keep += EMAIL_HOST_USER
      Defaults	env_keep += EMAIL_HOST_PASSWORD
      Defaults	env_keep += DJANGO_SETTINGS_MODULE
      Defaults  env_keep += S3_BUCKET
      Defaults  env_keep += S3_ACCESS_KEY
      Defaults  env_keep += S3_SECRET_KEY
      Defaults  env_keep += MEMCACHED_HOST
      Defaults  env_keep += ES_HOST
      Defaults  env_keep += OPBEAT_ORGID
      Defaults  env_keep += OPBEAT_APPID
      Defaults  env_keep += OPBEAT_TOKEN
      Defaults  env_keep += SLACK_HOOK

# This is VERY ugly.  The problem is that Ansible keeps SSH
# connections open across tasks, so the environment variable changes
# and sudo secure environment changes above don't get picked up unless
# you blow away the SSH connection.  The only way to do that though is
# to kill *all* SSH connections on the remote machine.

- name: Kill SSH connections
  shell: "sudo ps -ef | grep sshd | grep `whoami` | awk '{print \"sudo kill -9\", $2}' | sh"
  failed_when: false
  when: env_vars|changed or ssh_env|changed
