# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-08-14 08:16
from __future__ import unicode_literals

from django.db import migrations


class Migration(migrations.Migration):

    TABLE_NAME = 'spatial_spatialunit'
    FUNC_NAME = 'calculate_project_area'
    TRIGGER_NAME = '{}_trigger'.format(FUNC_NAME)

    dependencies = [
        ('organization', '0005_add_area_to_project'),
        ('spatial', '0005_recalculate_area'),
    ]

    operations = [
        migrations.RunSQL(
            (
                'UPDATE organization_project SET area = (SELECT sum(area) from spatial_spatialunit where "spatial_spatialunit".project_id = "organization_project".id)'
            ),
            reverse_sql=migrations.RunSQL.noop
        ),
        migrations.RunSQL(
            """
            CREATE FUNCTION {func}() RETURNS trigger AS $$
            DECLARE
                project_id char(24);
                old_project_area numeric(25, 10);
                diff numeric(25, 10);
            BEGIN
                IF (TG_OP = 'DELETE')
                THEN
                    project_id := OLD.project_id;
                ELSE
                    project_id := NEW.project_id;
                END IF;

                IF (TG_OP = 'INSERT')
                THEN
                    diff := NEW.area;
                ELSIF (TG_OP = 'UPDATE') AND (NEW.area <> OLD.area)
                THEN
                    diff := NEW.area - OLD.area;
                ELSIF (TG_OP = 'DELETE')
                THEN
                    diff := OLD.area * -1;
                END IF;

                IF diff <> 0
                THEN
                    old_project_area := (SELECT area FROM organization_project WHERE id = project_id) LIMIT 1;
                    UPDATE organization_project SET area = old_project_area + diff WHERE id = project_id;
                END IF;
                RETURN NEW;
            END;
            $$ language plpgsql;

            CREATE TRIGGER {trigger}
                AFTER INSERT OR UPDATE OR DELETE
                ON {table}
                FOR EACH ROW
                EXECUTE PROCEDURE {func}();
            """.format(func=FUNC_NAME, trigger=TRIGGER_NAME, table=TABLE_NAME),
            reverse_sql="""
                DROP TRIGGER {trigger} ON {table};
                DROP FUNCTION {func}();
            """.format(func=FUNC_NAME, trigger=TRIGGER_NAME, table=TABLE_NAME)
        )
    ]
