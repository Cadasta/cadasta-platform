# -*- coding: utf-8 -*-
# Generated by Django 1.9.11 on 2016-11-23 09:04
from __future__ import unicode_literals

import itertools
from django.db import migrations
from pyxform.xls2json import parse_file_to_json


def populate_index_fields(apps, schema_editor):
    Project = apps.get_model('organization', 'Project')
    Questionnaire = apps.get_model('questionnaires', 'Questionnaire')
    QuestionGroup = apps.get_model('questionnaires', 'QuestionGroup')
    Question = apps.get_model('questionnaires', 'Question')

    def update_question(idx, **kwargs):
        question = Question.objects.get(**kwargs)
        question.index = idx
        question.save()

    def update_group(idx, **kwargs):
        group = QuestionGroup.objects.get(**kwargs)
        group.index = idx
        group.save()
        return group.id

    def update_children(children, questionnaire_id, question_group_id=None):
        for child, idx in zip(children, itertools.count()):
            if child['type'] in ['group', 'repeat']:
                group_id = update_group(idx,
                                        questionnaire_id=questionnaire_id,
                                        question_group_id=question_group_id,
                                        name=child['name'])
                update_children(child.get('children', []),
                                questionnaire_id,
                                question_group_id=group_id)
            else:
                update_question(idx,
                                questionnaire_id=questionnaire_id,
                                question_group_id=question_group_id,
                                name=child['name'])

    for project in Project.objects.all():
        if project.current_questionnaire:
            questionnaire = Questionnaire.objects.get(
                id=project.current_questionnaire)

            if questionnaire.xls_form:
                q_json = parse_file_to_json(questionnaire.xls_form.file.name)
                update_children(q_json.get('children', []), questionnaire.id)


class Migration(migrations.Migration):

    dependencies = [
        ('questionnaires', '0015_add_question_index_field'),
    ]

    operations = [
        migrations.RunPython(
            populate_index_fields,
            reverse_code=migrations.RunPython.noop
        )
    ]
