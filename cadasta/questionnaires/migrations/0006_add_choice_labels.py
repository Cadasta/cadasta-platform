# -*- coding: utf-8 -*-
# Generated by Django 1.9.6 on 2016-09-26 13:07
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations
from django.contrib.contenttypes.models import ContentType

from organization.models import Project
from jsonattrs.models import Schema, AttributeType


def add_schemas(ss, ct, sels):
    for take in range(len(sels) + 1):
        for s in Schema.objects.filter(content_type=ct,
                                       selectors=sels[0:take]):
            ss.add(s)


def add_attribute_choice_labels(apps, schema_editor):
    # Empty database?  Probably during testing...
    if not AttributeType.objects.exists():
        return

    Questionnaire = apps.get_model('questionnaires', 'Questionnaire')

    select_types = [AttributeType.objects.get(name=n)
                    for n in ['select_one', 'select_multiple']]
    processed_schemas = set()
    for prj in Project.objects.all():
        org = prj.organization

        if (prj.current_questionnaire is not None and
                prj.current_questionnaire != ''):
            quest = Questionnaire.objects.get(pk=prj.current_questionnaire)
            selectors = (org.pk, prj.pk, prj.current_questionnaire)
            for ct, sels in settings.JSONATTRS_SCHEMA_SELECTORS.items():
                app_label, model = ct.split('.')
                content_type = ContentType.objects.get(
                    app_label=app_label, model=model
                )
                schemas_to_process = set()
                if len(sels) > 3:
                    cls = content_type.model_class()
                    selfield = cls._meta.get_field(sels[3])
                    for choice in selfield.choices:
                        add_schemas(schemas_to_process, content_type,
                                    selectors + (choice[0],))
                else:
                    add_schemas(schemas_to_process, content_type, selectors)
                for schema in schemas_to_process:
                    if schema not in processed_schemas:
                        processed_schemas.add(schema)
                        for a in schema.attributes.filter(
                            attr_type__in=select_types
                        ):
                            q = quest.questions.get(name=a.name)
                            opts = {o.name: o.label for o in q.options.all()}
                            a.choice_labels = [opts[c] for c in a.choices]
                            a.save()


class Migration(migrations.Migration):

    dependencies = [
        ('questionnaires', '0005_auto_20160912_0720'),
        ('jsonattrs',      '0002_attribute_choice_labels')
    ]

    operations = [
        migrations.RunPython(
            add_attribute_choice_labels,
            reverse_code=migrations.RunPython.noop
        )
    ]
