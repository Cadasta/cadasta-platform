from datetime import datetime
from django.test import TestCase
from .factories import UserFactory
from accounts.models import VerificationDevice
from core.tests.utils.cases import UserTestCase
from unittest import mock
from django.conf import settings


class UserTest(TestCase):
    def test_repr(self):
        date = datetime.now()
        user = UserFactory.build(username='John',
                                 full_name='John Lennon',
                                 email='john@beatles.uk',
                                 email_verified=True,
                                 phone='+12025550111',
                                 phone_verified=True)
        assert repr(user) == ('<User username=John'
                              ' full_name=John Lennon'
                              ' email=john@beatles.uk'
                              ' email_verified=True'
                              ' phone=+12025550111'
                              ' phone_verified=True>').format(date)


class VerificationDeviceTest(UserTestCase, TestCase):
    def setUp(self):
        super().setUp()

        self.sherlock = UserFactory.create()
        self.sherlock.verificationdevice = VerificationDevice.objects.create(
            user=self.sherlock,
            unverified_phone=self.sherlock.phone)

        self.john = UserFactory.create()
        self.john.verificationdevice = VerificationDevice.objects.create(
            user=self.john,
            unverified_phone=self.john.phone)

        self.TOTP_TOKEN_VALIDITY = settings.TOTP_TOKEN_VALIDITY
        self._now = 1497657600

    def test_instant(self):
        """Verify token as soon as it is created"""
        device = self.sherlock.verificationdevice

        with self.with_time(self._now):
            token = device.generate_challenge()
            verified = device.verify_token(token)

        self.assertTrue(verified)

    def test_barely_made_it(self):
        """Verify token 1 second before it expires"""
        device = self.sherlock.verificationdevice

        with self.with_time(self._now):
            token = device.generate_challenge()
        with self.with_time(self._now + self.TOTP_TOKEN_VALIDITY - 1):
            verified = device.verify_token(token)

        self.assertTrue(verified)

    def test_too_late(self):
        """Verify token 1 second after it expires"""
        device = self.sherlock.verificationdevice

        with self.with_time(self._now):
            token = device.generate_challenge()
        with self.with_time(self._now + self.TOTP_TOKEN_VALIDITY + 1):
            verified = device.verify_token(token)

        self.assertFalse(verified)

    def test_future(self):
        """Verify token from the future. Time Travel!!"""
        device = self.sherlock.verificationdevice

        with self.with_time(self._now + 1):
            token = device.generate_challenge()
        with self.with_time(self._now - 1):
            verified = device.verify_token(token)

        self.assertFalse(verified)

    def test_code_reuse(self):
        """Verify same token twice"""
        device = self.sherlock.verificationdevice

        with self.with_time(self._now):
            token = device.generate_challenge()
            verified_once = device.verify_token(token)
            verified_twice = device.verify_token(token)

        self.assertTrue(verified_once)
        self.assertFalse(verified_twice)

    def test_cross_user(self):
        """Verify token generated by one device with that of another"""
        device_sherlock = self.sherlock.verificationdevice
        device_john = self.john.verificationdevice
        with self.with_time(self._now):
            token = device_sherlock.generate_challenge()
            verified = device_john.verify_token(token)

        self.assertFalse(verified)

    def test_token_invalid(self):
        device = self.sherlock.verificationdevice
        with self.with_time(self._now):
            token = device.generate_challenge()
            verified_invalid_token = device.verify_token('ABCDEF')
            verified_valid_token = device.verify_token(token)

        self.assertFalse(verified_invalid_token)
        self.assertTrue(verified_valid_token)

    def with_time(self, timestamp):
        return self._patch('time.time', lambda: timestamp)

    def _patch(self, *args, **kwargs):
        return mock.patch(*args, **kwargs)
