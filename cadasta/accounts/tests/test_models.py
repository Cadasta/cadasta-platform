from datetime import datetime
from django.test import TestCase
from .factories import UserFactory
from ..models import VerificationDevice, User
from unittest import mock
from django.conf import settings


class UserTest(TestCase):
    def test_repr(self):
        date = datetime.now()
        user = UserFactory.build(username='John',
                                 full_name='John Lennon',
                                 email='john@beatles.uk',
                                 email_verified=True,
                                 phone='+12025550111',
                                 phone_verified=True)
        assert repr(user) == ('<User username=John'
                              ' full_name=John Lennon'
                              ' email=john@beatles.uk'
                              ' email_verified=True'
                              ' phone=+12025550111'
                              ' phone_verified=True>').format(date)


class VerificationDeviceTest(TestCase):
    def setUp(self):
        self.sherlock = UserFactory.create(username='sherlock',
                                           full_name='Sherlock Holmes',
                                           email='sherlock@holmes.com',
                                           email_verified=True,
                                           phone='',
                                           phone_verified=False)
        self.john = UserFactory.create(username='john',
                                       full_name='John Watson',
                                       email='john@watson.com',
                                       email_verified=True,
                                       phone='',
                                       phone_verified=False)
        self.sherlock_device = VerificationDevice.objects.create(
            user=self.sherlock,
            unverified_phone='+919327768250',
            secret_key='01234567890123456789')
        self.john_device = VerificationDevice.objects.create(
            user=self.john,
            unverified_phone='+12025550167',
            secret_key='98765432109876543210')

        self.user_list_before_test = [self.sherlock.id, self.john.id]
        self._now = 1497657600

    def test_instant(self):
        """ Verify token the instant it was generated."""

        device = self.sherlock.verificationdevice

        with self.with_time(self._now):
            token = device.generate_token()
            verified = device.verify_token(token)

        self.assertTrue(verified)

    def test_barely_made_it(self):
        """ Verify token at the last possible second."""

        device = self.sherlock.verificationdevice

        with self.with_time(self._now):
            token = device.generate_token()
        with self.with_time(
                self._now + getattr(settings, 'TOTP_TOKEN_VALIDITY')):
            verified = device.verify_token(token)

        self.assertTrue(verified)

    def test_too_late(self):
        """Verify token 1 second after it expires"""

        device = self.sherlock.verificationdevice

        with self.with_time(self._now):
            token = device.generate_token()
        with self.with_time(
                self._now + getattr(settings, 'TOTP_TOKEN_VALIDITY') + 1):
            verified = device.verify_token(token)

        self.assertFalse(verified)

    def test_future(self):
        """Verify token from the future. Time Travel!!"""

        device = self.sherlock.verificationdevice
        with self.with_time(self._now + 1):
            token = device.generate_token()
        with self.with_time(self._now):
            verified = device.verify_token(token)

        self.assertFalse(verified)

    def test_token_reuse(self):
        """Verify same token twice"""

        device = self.sherlock.verificationdevice
        with self.with_time(self._now):
            token = device.generate_token()
            verified_once = device.verify_token(token)
            verified_twice = device.verify_token(token)

        self.assertTrue(verified_once)
        self.assertFalse(verified_twice)

    def token_cross_user(self):
        """Verify token generated by one device with that of another"""
        device_sherlock = self.sherlock.verificationdevice
        device_john = self.john.verificationdevice

        with self.with_time(self._now):
            token = device_sherlock.generate_token()
            verified = device_john.verify_token(token)
        self.assertFalse(verified)

    def with_time(self, timestamp):
        return self._patch('time.time', lambda: timestamp)

    def _patch(self, *args, **kwargs):
        return mock.patch(*args, **kwargs)

    def tearDown(self):
        """Delete users created during test"""
        User.objects.filter(id__in=self.user_list_before_test).delete()
